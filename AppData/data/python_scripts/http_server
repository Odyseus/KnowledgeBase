#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os
import sys


def start_server(web_app_path, host, port):
    os.execv(web_app_path, [" "] + [host, port])


def stop_server(app_slug):
    from subprocess import check_output, STDOUT
    import signal

    # The only way that I could find to get all the processes IDs without using
    # a third-party Python module with thousands of lines of code (psutil).
    pid_list = check_output("ps -ef | grep '%s_webapp.py' | awk '{print $2}'" % app_slug,
                            stderr=STDOUT,
                            shell=True)
    pid_list = pid_list.decode("UTF-8").strip().split("\n")

    if pid_list:
        for proc_id in pid_list:
            try:
                os.kill(int(proc_id), signal.SIGTERM)
            except ProcessLookupError:
                continue


if __name__ == "__main__":
    action, app_slug, host, port = sys.argv[1:]
    web_app_path = os.path.abspath(os.path.join("..", "..", "AppData",
                                                "%sApp" % app_slug,
                                                "%s_webapp.py" % app_slug))

    if action == "start":
        start_server(web_app_path, host, port)
    elif action == "stop":
        stop_server(app_slug)
    elif action == "restart":
        try:
            stop_server(app_slug)
        finally:
            start_server(web_app_path, host, port)
